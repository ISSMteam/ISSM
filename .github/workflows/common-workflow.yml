name: Common CI

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      build_type:
        required: true
        type: string
      build_command:
        required: true
        type: string
      ext_install_command:
        required: true
        type: string
      test_cases:
        required: true
        type: string
      additional_options:
        required: true
        type: string
      interface:
        required: true
        type: string
      python_version:
        required: false
        type: string

env:
  ISSM_DIR: ${{ github.workspace }}

jobs:
  build:
    name: build-ISSM-${{ inputs.os }}-${{ inputs.build_type }}
    runs-on: ${{ inputs.os }}
    outputs:
      test_matrix: ${{ steps.createTestMatrix.outputs.test_output }}
    steps:
      - name: Free disk space
        run: |
          # Source: https://dev.to/mathio/squeezing-disk-space-from-github-actions-runners-an-engineers-guide-3pjg#6-how-to-automate-cleanup-in-your-ci
          #

          # Remove Java (JDKs)
          #sudo rm -rf /usr/lib/jvm

          # Remove .NET SDKs
          sudo rm -rf /usr/share/dotnet

          # Remove Swift toolchain
          sudo rm -rf /usr/share/swift

          # Remove Haskell (GHC)
          sudo rm -rf /usr/local/.ghcup

          # Remove Julia
          sudo rm -rf /usr/local/julia*

          # Remove Android SDKs
          sudo rm -rf /usr/local/lib/android

          # Remove Chromium (optional if not using for browser tests)
          sudo rm -rf /usr/local/share/chromium

          # Remove Microsoft/Edge and Google Chrome builds
          sudo rm -rf /opt/microsoft /opt/google

          # Remove Azure CLI
          sudo rm -rf /opt/az

          # Remove PowerShell
          sudo rm -rf /usr/local/share/powershell

          # Remove CodeQL and other toolcaches
          sudo rm -rf /opt/hostedtoolcache

          docker system prune -af || true
          docker builder prune -af || true
          df -h
      - name: Check out copy of repository
        uses: actions/checkout@v4

      - name: Cache external packages
        uses: actions/cache@v3
        id: cache-externalpackages
        env:
          cache-name: cache-externalpackages-${{ inputs.build_type }}
        with:
          path: |
            ${{ env.ISSM_DIR }}/externalpackages/
            !${{ env.ISSM_DIR }}/externalpackages/petsc/src/
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Prepare external packages
        if: ${{ steps.cache-externalpackages.outputs.cache-hit != 'true' }}
        run: |
          ${{ inputs.ext_install_command }}

      - name: Get MATLAB
        if: ${{ inputs.interface == 'matlab' }}
        id: setup-matlab
        uses: matlab-actions/setup-matlab@v2
        with:
          release: latest
          cache: true

      - name: Prepare Python
        if: contains( inputs.interface, 'python')
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python dependencies
        if: contains(inputs.interface, 'python')
        run: |
          sudo apt update
          sudo apt install libpython${{ inputs.python_version }}-dev
          sudo apt install python3-dev
          python -m pip install --upgrade pip
          sudo apt install -y python3-tk
          python -m pip install numpy scipy matplotlib nose

      - name: Build ISSM
        run: |
          export CC=${{ env.ISSM_DIR }}/externalpackages/petsc/install/bin/mpicc
          export CXX=${{ env.ISSM_DIR }}/externalpackages/petsc/install/bin/mpicxx
          export FC=${{ env.ISSM_DIR }}/externalpackages/petsc/install/bin/mpifort
          export F77=$FC
          export F90=$FC
          export MATLAB_ROOT=${{ steps.setup-matlab.outputs.matlabroot }}
          export PYTHON_ROOT=${{ env.pythonLocation }}
          ${{ inputs.build_command }}

      - name: Compile ISSM
        run: make -j4 install

      - name: Compress ISSM artifact
        run: tar --exclude='./externalpackages/petsc/src' -cvf ISSM_artifact-${{ runner.os }}-${{ inputs.build_type }}.tar -C ${{ env.ISSM_DIR }}/ .

      - name: Upload ISSM artifact
        uses: actions/upload-artifact@v4
        with:
          name: ISSM-${{ runner.os }}-${{ inputs.build_type }}
          path: ISSM_artifact-${{ runner.os }}-${{ inputs.build_type }}.tar
          compression-level: 1
      - id: createTestMatrix
        run: |
          TESTS='${{ inputs.test_cases }}'
          echo "test_output=$(jq -cn --argjson values "$TESTS" '{test_cases: $values}')" >> $GITHUB_OUTPUT
  test:
    runs-on: ${{ inputs.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build.outputs.test_matrix) }}
    steps:
      - name: Download ISSM artifact
        uses: actions/download-artifact@v4
        with:
          name: ISSM-${{ runner.os }}-${{ inputs.build_type }}
          path: ${{ env.ISSM_DIR }}

      - name: Unpack ISSM artifact
        run: |
          tar -xvf ISSM_artifact-${{ runner.os }}-${{ inputs.build_type }}.tar
          source $ISSM_DIR/etc/environment.sh
        working-directory: ${{ env.ISSM_DIR }}
        shell: 'bash'

      - name: Get MATLAB
        if: ${{ inputs.interface == 'matlab' }}
        id: setup-matlab
        uses: matlab-actions/setup-matlab@v2
        with:
          release: R2023b
          cache: true

      - name: Creating matlab_ci.m
        if: ${{ inputs.interface == 'matlab' }}
        run: |
          cat > ${ISSM_DIR}/matlab_ci.m << EOF
          % Go to the test directory
          cd $ISSM_DIR/test/NightlyRun/

          % Add ISSM tools to path
          addpath('${ISSM_DIR}/src/m/dev');
          devpath;

          % Run tests
          runme('exclude',[IdFromString('Dakota')],${{ inputs.additional_options }} 'id',[${{ matrix.test_cases }}],'quitonerror',1);
          quit(0);
          EOF
          cat ${ISSM_DIR}/matlab_ci.m

      - name: Get run-matlab-command
        if: ${{ inputs.interface == 'matlab' }}
        run: |
          wget -O /usr/local/bin/run-matlab-command https://ssd.mathworks.com/supportfiles/ci/run-matlab-command/v2/glnxa64/run-matlab-command
          chmod +x /usr/local/bin/run-matlab-command

      - name: Run MATLAB tests
        if: ${{inputs.interface == 'matlab'}}
        run: |
          source $ISSM_DIR/etc/environment.sh
          LD_PRELOAD=/lib/x86_64-linux-gnu/libstdc++.so.6:$ISSM_DIR/externalpackages/petsc/install/lib/libmpi.so:$ISSM_DIR/externalpackages/petsc/install/lib/libmpifort.so run-matlab-command "matlab_ci"

      - name: Prepare Python
        if: contains(inputs.interface, 'python')
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python dependencies
        if: contains( inputs.interface, 'python')
        run: |
          python -m pip install --upgrade pip
          sudo apt update && sudo apt install -y python3-tk
          python -m pip install numpy scipy matplotlib nose netCDF4

      - name: Run Python tests
        if: contains(inputs.interface, 'python')
        run: |
          export PYTHONPATH="${ISSM_DIR}/src/m/dev:${PYTHONPATH}"
          export PYTHONSTARTUP="${ISSM_DIR}/src/m/dev/devpath.py"
          export PYTHONUNBUFFERED=1
          source $ISSM_DIR/etc/environment.sh
          cd $ISSM_DIR/test/NightlyRun
          LD_PRELOAD=/lib/x86_64-linux-gnu/libstdc++.so.6:$ISSM_DIR/externalpackages/petsc/install/lib/libmpi.so:$ISSM_DIR/externalpackages/petsc/install/lib/libmpifort.so ./runme.py --output=nightly --rank=1 --numprocs=1 --id ${{ matrix.test_cases }} --exclude Dakota 234 418 420
